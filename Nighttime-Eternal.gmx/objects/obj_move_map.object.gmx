<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_movetile_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
left = noone;
right = noone;
up = noone;
down = noone;
pony = noone;

//currX = 0;
//currY = 0;
stamina = 0;
maxStam = 0;
startDir = 0;
optimalDir = 0;
optimal = false;
head = true;
destroy = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (destroy) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creates new nodes
var optimal = false;
var tempStamina = maxStam;
var tempX = x;
var tempY = y;
if (abs(tempDir) == 1) {
    tempX += tempDir * global.gridSize;
}
else if (abs(tempDir) == 2) {
    tempY += tempDir/2 * global.gridSize;
}
var moveTile = instance_position(tempX, tempY, obj_movetile);
if (moveTile == noone || moveTile.isWall) {
    tempStamina = -1;
}
tempStamina -= moveTile.stamCost

if (tempStamina &gt;= 0) {
    //Tries to get a node from the space
    // Change from var node to tempNode, which will be a property of the object
    tempNode = instance_position(tempX, tempY, obj_move_node);
    //Loops through nodes in the same location
    while (tempNode != noone) &amp;&amp; (tempNode.pony != inst) {
        //Deactivates nodes in the way
        instance_deactivate_object(tempNode);
        //Gets the next node in the location
        tempNode = instance_position(tempX, tempY, obj_move_node);
    }
    instance_activate_object(obj_move_node); //REACTIVATES ALL MOVE NODES.
    if (tempNode == noone) { 
        tempNode = instance_create(tempX, tempY, obj_move_node);
        /* Important for WORKSPACE */
        /* Separate node creation into own event */
        with(tempNode) {
            visible = false;
            tile = moveTile;
            maxStam = tempStamina;
            startDir = other.tempDir;
            optimalDir = other.tempDir * -1;
            pony = other.pony;
            event_perform(ev_other, ev_user0);
        }
        optimal = true;
    }
    else if (tempNode.maxStam &lt; tempStamina) {
        with(tempNode) {
            maxStam = tempStamina;
            startDir = other.tempDir;
            optimalDir = other.tempDir * -1;
            event_perform(ev_other, ev_user0);
        }
        optimal = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Builds the Move Map</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///scr_build_move_map(x, y, stamina, dir, inst, prev)

// set these in pony when creating this move map
/*
var x = argument[0];
var y = argument[1];
var stamina = argument[2];
var dir = argument[3];
var inst = argument[4];
var prev = argument[5];
*/
//var optimal = false;



//Checks the stamina remaining against equipped attack costs
//Assigns the attack stage of the node
/*
if (optimal) {
    if (stamina &gt;= inst.atk4) {
        with(node) {
            atkStage = 4;
        }
    }
    else if (stamina &gt;= inst.atk3) {
        with(node) {
            atkStage = 3;
        }
    }
    else if (stamina &gt;= inst.atk2) {
        with(node) {
            atkStage = 2;
        }
    }
    else if (stamina &gt;= inst.atk1) {
        with(node) {
            atkStage = 1;
        }
    }
    //By default, assigns atkStage 0 (only movement, no attack).
    else {
        with(node) {
            atkStage = 0;
        }
    }
*/
    //initial case
    /* CURRENT WORKSPACE */

tempDir = 1;
event_perform(ev_other, ev_user0);
right = tempNode;
tempDir = -1;
event_perform(ev_other, ev_user0);
left = tempNode;
tempDir = -2;
event_perform(ev_other, ev_user0);
up = tempNode;
tempDir = 2;
event_perform(ev_other, ev_user0);
down = tempNode;

/*
var right = instance_position(x + 32, y, obj_movetile);
var left = instance_position(x - 32, y, obj_movetile);
var up = instance_position(x, y - 32, obj_movetile);
var down = instance_position(x, y + 32, obj_movetile);

if (right != noone) {
    with (right) {
        visible = true;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
